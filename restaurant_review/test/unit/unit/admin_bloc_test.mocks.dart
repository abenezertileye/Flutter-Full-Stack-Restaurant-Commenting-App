// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_review/test/unit/admin_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:restaurant_review/domain/entities/user_detail_entity.dart'
    as _i4;
import 'package:restaurant_review/infrastructure/repository/admin_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AdminRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdminRepository extends _i1.Mock implements _i2.AdminRepository {
  MockAdminRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.UserDetail>> fetch(dynamic role) => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [role],
        ),
        returnValue: _i3.Future<List<_i4.UserDetail>>.value(<_i4.UserDetail>[]),
      ) as _i3.Future<List<_i4.UserDetail>>);

  @override
  _i3.Future<String> ban(dynamic username) => (super.noSuchMethod(
        Invocation.method(
          #ban,
          [username],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #ban,
            [username],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> unban(dynamic username) => (super.noSuchMethod(
        Invocation.method(
          #unban,
          [username],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #unban,
            [username],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
