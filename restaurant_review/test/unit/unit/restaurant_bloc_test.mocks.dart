// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_review/test/unit/restaurant_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_review/domain/usecase/restaurants_usecase.dart'
    as _i3;
import 'package:restaurant_review/infrastructure/repository/restaurants_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantsRepository_0 extends _i1.SmartFake
    implements _i2.RestaurantsRepository {
  _FakeRestaurantsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsUseCase extends _i1.Mock
    implements _i3.RestaurantsUseCase {
  MockRestaurantsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RestaurantsRepository get restaurantsRepository => (super.noSuchMethod(
        Invocation.getter(#restaurantsRepository),
        returnValue: _FakeRestaurantsRepository_0(
          this,
          Invocation.getter(#restaurantsRepository),
        ),
      ) as _i2.RestaurantsRepository);

  @override
  _i4.Future<List<dynamic>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);
}
