// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_review/test/unit/restaurant_crud_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_review/domain/entities/create_restaurant_entity.dart'
    as _i6;
import 'package:restaurant_review/domain/entities/update_restaurant_entity.dart'
    as _i7;
import 'package:restaurant_review/domain/failures/restaurant_failure.dart'
    as _i5;
import 'package:restaurant_review/domain/usecase/restaurant_crud_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantCrudUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantCrudUsecase extends _i1.Mock
    implements _i3.RestaurantCrudUsecase {
  MockRestaurantCrudUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.RestaurantFailure, bool>>
      checkOwnerRestaurantforCreation() => (super.noSuchMethod(
            Invocation.method(
              #checkOwnerRestaurantforCreation,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.RestaurantFailure, bool>>.value(
                    _FakeEither_0<_i5.RestaurantFailure, bool>(
              this,
              Invocation.method(
                #checkOwnerRestaurantforCreation,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.RestaurantFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.RestaurantFailure, _i6.CreateRestaurantDTO>>
      createRestaurant(_i6.CreateRestaurantDTO? restaurant) =>
          (super.noSuchMethod(
            Invocation.method(
              #createRestaurant,
              [restaurant],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.RestaurantFailure,
                        _i6.CreateRestaurantDTO>>.value(
                _FakeEither_0<_i5.RestaurantFailure, _i6.CreateRestaurantDTO>(
              this,
              Invocation.method(
                #createRestaurant,
                [restaurant],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.RestaurantFailure, _i6.CreateRestaurantDTO>>);

  @override
  _i4.Future<_i2.Either<_i5.RestaurantFailure, _i2.Either<bool, String>>>
      checkOwnerRestaurantforUpdate() => (super.noSuchMethod(
            Invocation.method(
              #checkOwnerRestaurantforUpdate,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.RestaurantFailure,
                        _i2.Either<bool, String>>>.value(
                _FakeEither_0<_i5.RestaurantFailure, _i2.Either<bool, String>>(
              this,
              Invocation.method(
                #checkOwnerRestaurantforUpdate,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.RestaurantFailure, _i2.Either<bool, String>>>);

  @override
  _i4.Future<_i2.Either<_i5.RestaurantFailure, _i7.UpdateRestaurantDTO>>
      updateRestaurant(_i7.UpdateRestaurantDTO? restaurant) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateRestaurant,
              [restaurant],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.RestaurantFailure,
                        _i7.UpdateRestaurantDTO>>.value(
                _FakeEither_0<_i5.RestaurantFailure, _i7.UpdateRestaurantDTO>(
              this,
              Invocation.method(
                #updateRestaurant,
                [restaurant],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.RestaurantFailure, _i7.UpdateRestaurantDTO>>);

  @override
  _i4.Future<_i2.Either<_i5.RestaurantFailure, _i2.Unit>> deleteRestaurant() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRestaurant,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.RestaurantFailure, _i2.Unit>>.value(
                _FakeEither_0<_i5.RestaurantFailure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteRestaurant,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.RestaurantFailure, _i2.Unit>>);
}
